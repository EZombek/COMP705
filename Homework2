"""
h2.py
Ethan Jarzombek
May 5, 2018
"""
#############################################

print("\n~~~~COMPARE~~~~")

def compare(x, y):
	"""
	compare two numbers.
	x, y: integer
	Return: 0 if x and y are equal, -1 if x < y, and
	1 if x > y
	"""

	if x == y:
		print("(X = {}, Y = {}) X and Y are equal." .format(x, y))
		return 0
	elif x < y:
		print("(X = {}, Y = {}) X is less than Y." .format(x, y))
		return -1
	else:
		print("(X = {}, Y = {}) X is greater than Y." .format(x, y))
		return 1

compare(1, 5)
compare(9, 5)
compare(1, 1)


###############################################


print("\n~~~~IS BETWEEN~~~~")

def is_between(x,y,z):
	"""
	Decide if the 2nd number is in interval [x, z],
	including the margins.
	x, y, z: integer
	Return: True if x <= y <= z, False otherwise
	"""
	if (x <= y <= z):
		print("{} is between the numbers {} and {}" .format(y, x, z))
		return(True)
	else:
		print("{} is not between the numbers {} and {}." .format(y, x, z))
		return(False)

is_between(1, 8, 10)
is_between(5, 1, 9)
is_between(2, 6, 1)


###############################################


print("\n~~~~FIND INDEX~~~~")

def find_index(letter, word):
	"""
	Find index of first occurrence of letter in word.
	letter: one-character string
	word: string
	Return: -1 on failure
	"""

	idx = 0
	found = False

	while idx < len(word) and not found:
		if letter == word[idx]:
			found = True
		else:
			idx = idx + 1

	if found:
		print("The letter {} is in the [{}] index of '{}'." .format(letter, idx, word))
		return idx
	else:
		print("The letter {} is not in the word '{}'" .format(letter, word))
		return -1

find_index('c', 'bicycle')
find_index('z', 'taco')
find_index('z', 'zamboni')


###############################################


print("\n~~~~REMOVE LEADING BLANKS~~~~")

def remove_leading_blanks(sentence):
	"""
	Return copy of sentence with leading blanks removed.
	sentence: string
	Return: string
	"""

	print("***"+sentence.lstrip()+"***")

remove_leading_blanks("   There can only be one..   ")
remove_leading_blanks("   The pen is mightier than the sword.")
remove_leading_blanks("   Gimme back my spaces!")


###############################################


print("\n~~~~MAKE TITLE~~~~")

def make_title(word_list):
	"""
	Capitalize words in word_list
	word_list: list of strings
	Returns: copy of word_list where all original words
	are capitalized.
	"""

	idx = 0
	upper_word_list = []

	for current_word in word_list:
		current_word = current_word.upper()
		upper_word_list.append (current_word)
	upper_sentence = ' '.join(upper_word_list)

	print(upper_sentence)

make_title(['Saying', 'of', 'the', 'day:'])
make_title(['Life', 'is', 'wonderful,'])
make_title(['Without', 'it,', 'we', 'would', 'all', 'be', 'dead!'])





###############################################


print("\n~~~~SHORTER THAN 5~~~~")

def shorter_than_5(word_list):
	"""
	Filter out strings that are shorter than 5 in word_list.
	word_list: string with whitespace-separated strings
	Returns: copy of word_list where all words have length 5
	or higher.
	"""


	for word in word_list:
		if len(word) >= 5:
			print(word)
		else:
			del word
	print("")

shorter_than_5(['The', 'grass', 'is', 'always', 'greener'])
shorter_than_5(['He', 'who', 'laughs', 'last', 'thinks', 'slowest'])
shorter_than_5(['There', 'is', 'too', 'much', 'blood', 'in', 'my', 'caffeine', 'system'])
###############################################
