"""
h1.py
Ethan Jarzombek
Mar 25, 2018
"""

from math import pi
from random import randint

def circle_area(radius):
    """
    Calculate the area of a circle with given radius
    radius: non-negative float
    Returns: float
    """
    return pi * radius ** 2

def is_even(number):
    """
    Check if number is even
    number: integer
    Returns: True if number is even, False otherwise
    """
    if number % 2 == 0:
        return True
    return False

def sum_of_odd_to(n):
    """
    Calculate the sum of all odd numbers from 1 to n, including n
    n: positive integer
    Returns: integer
    """
    total = 0
    for num in range(1, n + 2, 2):
        total = total + num
    return total

def miles_per_gallon(miles, gallons):
    """
    Calcuate miles per gallons
    miles: positive float
    gallons: positive float
    Returns: float
    """
    return miles / gallons

def ten_random_numbers(start, stop):
    """
    Returns ten random integers between start and stop, including start, stop
    start, stop: non-negative integers, stop >= start
    Returns: list of random integers in [start, stop] interval
    """
    t = [ ]
    for count in range(10):
        t.append(randint(start, stop))
    return t

def average_random_1_to_10(n):
    """
    Calcuate the average of random numbers between 1 and 10 (inclusive) 
    geneerated n times
    n: positive integer - how many times random numbers are generated
    Returns: integer
    """
    total = 0
    for count in range(n + 1):
        total = total + randint(1, 10)
    avg = total / n
    return avg


def test_one_param_function(f, a1, a2, a3):
    """
    Print out test case and return values for one_paraemter function
    f - function
    a1, a2, a3 - test case values
    """
    print("{}({}) --> {}".format(f, a1, f(a1)))
    print("{}({}) --> {}".format(f, a2, f(a2)))
    print("{}({}) --> {}".format(f, a3, f(a3)))

def test_two_param_function(f, t1, t2, t3):
    """
    Print out test case and return values for two-parameter function
    f - function
    t1, t2, t3 - 2-elemenent tuples with test case values
    """
    print("{}({}, {}) --> {}".format(f, t1[0], t1[1], f(t1[0], t1[1])))
    print("{}({}, {}) --> {}".format(f, t2[0], t2[1], f(t2[0], t2[1])))
    print("{}({}, {}) --> {}".format(f, t3[0], t3[1], f(t3[0], t3[1])))


def run_all_test_cases( ):
    """
    Run test_one_param_function( ) and test_two_param_function( ), with 
    three test cases eash
    """
    test_one_param_function(circle_area, 4, 0, -6)
    test_one_param_function(is_even, 4, 0, 3)
    test_one_param_function(sum_of_odd_to, 4, 0, 7)
    test_two_param_function(miles_per_gallon, (50, 29), (80, 20), (12, 12))
    test_two_param_function(ten_random_numbers, (0, 10), (4, 10), (10, 0))
    test_one_param_function(average_random_1_to_10, 4, 0, 1000)

def is_even(n):
	"""
	Decides if number is even.

	n: integer
	Returns: True if n is even, False otherwise.

	>>> is_even(2)
	True
	>>> is_even(5)
	False
	"""
	if n % 2 == 0:
		return True
	else:
		return False

if __name__ == '__main__':
    #run_all_test_cases( )
    import doctest
    doctest.testmod( )
