"""
Practice with functions that do computations with values from paramters.
Some functions also return a value.
lab3.py
Ethan Jarzombek
Created 9/19/17; Updated 2/14/18
"""

def check_fermat(a, b, c, n):
	"""
	Checks validity of Fermat's Last Theorem and returns True
	if Fermat was right, or False otherwise.
	
	Fermat Last Theorem: there are no integers a,b,c, such that 
	a^n + b^n = c^n for any values of n greater 2.	
	a, b, c - integers
	n - integer greater than 2
	Returns: True if the theorem holds, or False otherwise

	>>> check_fermat(3, 1, 6, 3)
	3^3 + 1^3 EQUAL TO 6^3 ???
	27 + 1 NOT EQUAL TO 216 !!!
	Fermat was right!
	3

	"""
	# check if n is greater than 2
	if n <= 2:
		print("n is less than or equal to 2")
		return 1
	else: 
		# check if a^n + b^n = c^n
		print("{}^{} + {}^{} EQUAL TO {}^{} ???".format(a, n, b, n, c, n))
		
		first = pow(a, n) # set a equal to a^n
		second = pow(b, n) # set b equal to b^n
		result = pow(c, n) # set c equal to c^n
		# conditional to do the checking
		print("{} + {} NOT EQUAL TO {} !!!".format(first, second, result))
		if first + second == result:
			print("Fermat was wrong!")
			return 2
		else:
			print("Fermat was right!")
			return 3

		
def is_triangle(a, b, c):
	"""
	Checks if the given values form a triangle.
	
	Triangle theorem: if any of the three lengths is greater
	than the sum of the other two, a triangle cannot be formed.
	Uses 2-branch conditional with OR for violating the theorem
	a, b, c - three positive numbers
	Returns: True if the theorem holds, False otherwise

	>>> is_triangle(3, 6, 9)
	3, 6, and 9 do NOT form a triangle.
	1

	"""
	# conditional to do the checking

	if (a + b > c) or (b + c > a) or (a + c > b):
		print("{}, {}, and {} do NOT form a triangle.".format(a, b, c))
		return 1
	else:
		print("{}, {}, and {} DO form a triangle".format(a, b, c))
		return 2

def is_triangle2(a, b, c):
	"""
	Checks if the given values form a triangle and prints out yes or no.

	Uses 4-branch conditional for each possible violation of theorem.
	3 branches take into account 3 possible violations.
	last branch meets all 3 constraints.

	>>> is_triangle2(3, 4, 9)
	9 is bigger than 3 + 4.
	3
	"""


	if (a > b + c):
		print("{} is bigger than {} + {}.".format(a, b, c))
		return 1
	elif (b > a + c):
		print("{} is bigger than {} + {}.".format(b, a, c))
		return 2
	elif (c > a + b):
		print("{} is bigger than {} + {}.".format(c, a, b))
		return 3
	else:
		print("{}, {}, and {} form a triangle.".format(a, b, c))
		return 4


if __name__ == '__main__':
	import doctest
	doctest.testmod()
